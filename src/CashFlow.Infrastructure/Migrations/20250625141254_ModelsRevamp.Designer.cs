// <auto-generated />
using System;
using CashFlow.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CashFlow.Infrastructure.Migrations
{
    [DbContext(typeof(CashFlowDbContext))]
    [Migration("20250625141254_ModelsRevamp")]
    partial class ModelsRevamp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CashFlow.Domain.Entities.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("CodigoCliente");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("cliente", (string)null);
                });

            modelBuilder.Entity("CashFlow.Domain.Entities.ComposicaoProduto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("CodigoComposicaoProduto");

                    b.Property<Guid>("CodigoPeca")
                        .HasColumnType("uuid")
                        .HasColumnName("CodigoPeca");

                    b.Property<Guid>("CodigoProduto")
                        .HasColumnType("uuid")
                        .HasColumnName("CodigoProduto");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer")
                        .HasColumnName("Quantidade");

                    b.HasKey("Id");

                    b.HasIndex("CodigoPeca");

                    b.HasIndex("CodigoProduto");

                    b.ToTable("composicao_produto", (string)null);
                });

            modelBuilder.Entity("CashFlow.Domain.Entities.Expense", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("CashFlow.Domain.Entities.Income", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("CashFlow.Domain.Entities.ItemOrcamento", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("CodigoItemOrcamento");

                    b.Property<Guid>("CodigoOrcamento")
                        .HasColumnType("uuid")
                        .HasColumnName("CodigoOrcamento");

                    b.Property<Guid>("CodigoProduto")
                        .HasColumnType("uuid")
                        .HasColumnName("CodigoProduto");

                    b.Property<decimal>("Desconto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("Desconto");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Nome");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer")
                        .HasColumnName("Quantidade");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ValorTotal");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ValorUnitario");

                    b.HasKey("Id");

                    b.HasIndex("CodigoOrcamento");

                    b.HasIndex("CodigoProduto");

                    b.ToTable("item_orcamento", (string)null);
                });

            modelBuilder.Entity("CashFlow.Domain.Entities.ItemOrcamentoPeca", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("CodigoPecaOrcamento");

                    b.Property<Guid>("CodigoItem")
                        .HasColumnType("uuid")
                        .HasColumnName("CodigoItem");

                    b.Property<Guid>("CodigoPeca")
                        .HasColumnType("uuid")
                        .HasColumnName("CodigoPeca");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Descricao");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer")
                        .HasColumnName("Quantidade");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ValorTotal");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ValorUnitario");

                    b.HasKey("Id");

                    b.HasIndex("CodigoItem");

                    b.HasIndex("CodigoPeca");

                    b.ToTable("item_orcamento_peca", (string)null);
                });

            modelBuilder.Entity("CashFlow.Domain.Entities.Orcamento", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("CodigoOrcamento");

                    b.Property<long>("CodigoAutor")
                        .HasColumnType("bigint")
                        .HasColumnName("CodigoAutor");

                    b.Property<Guid>("CodigoCliente")
                        .HasColumnType("uuid")
                        .HasColumnName("CodigoCliente");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Descricao");

                    b.Property<DateTime>("Emissao")
                        .HasColumnType("datetime")
                        .HasColumnName("Emissao");

                    b.Property<string>("Observacao")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Observacao");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("Status");

                    b.Property<DateTime>("Validade")
                        .HasColumnType("datetime")
                        .HasColumnName("Validade");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ValorTotal");

                    b.HasKey("Id");

                    b.ToTable("Orcamento", (string)null);
                });

            modelBuilder.Entity("CashFlow.Domain.Entities.Peca", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("CodigoPeca");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Porcentagem")
                        .HasColumnType("numeric");

                    b.Property<int>("TamanhoPeca")
                        .HasColumnType("integer");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("peca", (string)null);
                });

            modelBuilder.Entity("CashFlow.Domain.Entities.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("CodigoProduto");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Ativo");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Nome");

                    b.Property<decimal>("ValorBase")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ValorBase");

                    b.HasKey("Id");

                    b.ToTable("produto", (string)null);
                });

            modelBuilder.Entity("CashFlow.Domain.Entities.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ExpenseId")
                        .HasColumnType("bigint");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("CashFlow.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserIdentifier")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CashFlow.Domain.Entities.ComposicaoProduto", b =>
                {
                    b.HasOne("CashFlow.Domain.Entities.Peca", "Peca")
                        .WithMany()
                        .HasForeignKey("CodigoPeca")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CashFlow.Domain.Entities.Produto", null)
                        .WithMany("Composicoes")
                        .HasForeignKey("CodigoProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Peca");
                });

            modelBuilder.Entity("CashFlow.Domain.Entities.Expense", b =>
                {
                    b.HasOne("CashFlow.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CashFlow.Domain.Entities.Income", b =>
                {
                    b.HasOne("CashFlow.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CashFlow.Domain.Entities.ItemOrcamento", b =>
                {
                    b.HasOne("CashFlow.Domain.Entities.Orcamento", "Orcamento")
                        .WithMany("Itens")
                        .HasForeignKey("CodigoOrcamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CashFlow.Domain.Entities.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("CodigoProduto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Orcamento");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("CashFlow.Domain.Entities.ItemOrcamentoPeca", b =>
                {
                    b.HasOne("CashFlow.Domain.Entities.ItemOrcamento", "Item")
                        .WithMany()
                        .HasForeignKey("CodigoItem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CashFlow.Domain.Entities.Peca", "Peca")
                        .WithMany()
                        .HasForeignKey("CodigoPeca")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Peca");
                });

            modelBuilder.Entity("CashFlow.Domain.Entities.Tag", b =>
                {
                    b.HasOne("CashFlow.Domain.Entities.Expense", "Expense")
                        .WithMany("Tags")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("CashFlow.Domain.Entities.Expense", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("CashFlow.Domain.Entities.Orcamento", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("CashFlow.Domain.Entities.Produto", b =>
                {
                    b.Navigation("Composicoes");
                });
#pragma warning restore 612, 618
        }
    }
}
